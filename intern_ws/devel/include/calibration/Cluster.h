// Generated by gencpp from file calibration/Cluster.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MESSAGE_CLUSTER_H
#define CALIBRATION_MESSAGE_CLUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration
{
template <class ContainerAllocator>
struct Cluster_
{
  typedef Cluster_<ContainerAllocator> Type;

  Cluster_()
    : index()
    , label()  {
    }
  Cluster_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , label(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _index_type;
  _index_type index;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _label_type;
  _label_type label;





  typedef boost::shared_ptr< ::calibration::Cluster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration::Cluster_<ContainerAllocator> const> ConstPtr;

}; // struct Cluster_

typedef ::calibration::Cluster_<std::allocator<void> > Cluster;

typedef boost::shared_ptr< ::calibration::Cluster > ClusterPtr;
typedef boost::shared_ptr< ::calibration::Cluster const> ClusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration::Cluster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration::Cluster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calibration::Cluster_<ContainerAllocator1> & lhs, const ::calibration::Cluster_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.label == rhs.label;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calibration::Cluster_<ContainerAllocator1> & lhs, const ::calibration::Cluster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calibration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::calibration::Cluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration::Cluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration::Cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration::Cluster_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::Cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::Cluster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b0088670d95be7298b39001111310db";
  }

  static const char* value(const ::calibration::Cluster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b0088670d95be72ULL;
  static const uint64_t static_value2 = 0x98b39001111310dbULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration/Cluster";
  }

  static const char* value(const ::calibration::Cluster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#float32 angle_min\n"
"#float32 angle_increment\n"
"int32[] index\n"
"int32[] label\n"
;
  }

  static const char* value(const ::calibration::Cluster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration::Cluster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cluster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration::Cluster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration::Cluster_<ContainerAllocator>& v)
  {
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "label[]" << std::endl;
    for (size_t i = 0; i < v.label.size(); ++i)
    {
      s << indent << "  label[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.label[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MESSAGE_CLUSTER_H
